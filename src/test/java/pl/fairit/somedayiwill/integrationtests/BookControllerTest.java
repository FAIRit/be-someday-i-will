package pl.fairit.somedayiwill.integrationtests;

import io.restassured.http.ContentType;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.boot.web.server.LocalServerPort;
import org.springframework.restdocs.RestDocumentationExtension;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import pl.fairit.somedayiwill.book.testbooks.TestBookDto;
import pl.fairit.somedayiwill.book.testbooks.TestBooks;
import pl.fairit.somedayiwill.book.usersbooks.BookService;
import pl.fairit.somedayiwill.newsletter.SendGridEmailService;
import pl.fairit.somedayiwill.security.TestAuthorization;

import static io.restassured.RestAssured.given;
import static io.restassured.RestAssured.when;
import static java.util.Objects.nonNull;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
@ExtendWith({RestDocumentationExtension.class, SpringExtension.class})
@MockBean(SendGridEmailService.class)
@ContextConfiguration
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
class BookControllerTest {
    @LocalServerPort
    private int port;
    private String token;

    @BeforeAll
    public void authorize() {
        token = TestAuthorization.getToken(port);
    }

    @Test
    public void shouldReturnUnauthorizedWhenGetWithNoTokePerformed() {
        //@formatter:off
        when()
                .get("/users/me/books")
        .then()
                .assertThat()
                .statusCode(401);
        //@formatter:on
    }

    @Test
    public void shouldReturnListOfUsersBooksWhenGetAllPerformed() {
        var bookToSave = TestBookDto.aRandomBookDto();
        var jsonBookDto = TestBookDto.asJSONString(bookToSave);

        //save book
        var postResponse = given()
                .header("Authorization", "Bearer " + token)
                .contentType(ContentType.JSON)
                .body(jsonBookDto)
                .post("/users/me/books")
                .then()
                .extract()
                .body();
        bookToSave = TestBookDto.fromJSONString(postResponse.asString());
        //get all
        var response = given()
                .header("Authorization", "Bearer " + token)
                .get("/users/me/books");
        var books = TestBooks.fromJSONString(response.getBody().asString());

        assert nonNull(books);
        assertEquals(1, books.getBooks().size());
        assertEquals(bookToSave, books.getBooks().get(0));
        assertEquals(200, response.getStatusCode());
    }

    @Test
    public void shouldReturnSavedBookWhenPostPerformed() {
        var bookToSave = TestBookDto.aRandomBookDto();
        var jsonBookDto = TestBookDto.asJSONString(bookToSave);

        var response = given()
                .header("Authorization", "Bearer " + token)
                .contentType(ContentType.JSON)
                .body(jsonBookDto)
                .post("/users/me/books");
        var returnedBookDto = TestBookDto.fromJSONString(response.getBody().asString());
        bookToSave.setId(returnedBookDto.getId());
                    /*BookId is generated by the database so there will always be this small difference
                    between objects before and after save. That's why I'm setting here id manually
                    to make this test possible to pass.
                    */

        assertEquals(bookToSave, returnedBookDto);
        assertEquals(201, response.getStatusCode());
    }

    @Test
    public void shouldReturnBookWhenGetBookByIdPerformed() {
        var bookToSave = TestBookDto.aRandomBookDto();
        var jsonBookDto = TestBookDto.asJSONString(bookToSave);

        //save book
        var postResponse = given()
                .header("Authorization", "Bearer " + token)
                .contentType(ContentType.JSON)
                .body(jsonBookDto)
                .post("/users/me/books");
        bookToSave = TestBookDto.fromJSONString(postResponse.getBody().asString());
        //get book
        var getResponse = given()
                .header("Authorization", "Bearer " + token)
                .contentType(ContentType.JSON)
                .get("/users/me/books/" + bookToSave.getId());
        var returnedBook = TestBookDto.fromJSONString(getResponse.getBody().asString());

        assertEquals(bookToSave, returnedBook);
        assertEquals(200, getResponse.getStatusCode());
    }

    @Test
    public void shouldReturnNoContentStatusCodeAfterDeleteOnePerformed() {
        var bookToSave = TestBookDto.aRandomBookDto();
        var jsonBookDto = TestBookDto.asJSONString(bookToSave);

        //@formatter:off
        //save book
        var postResponse = given()
                .header("Authorization", "Bearer " + token)
                .contentType(ContentType.JSON)
                .body(jsonBookDto)
                .post("/users/me/books");
        bookToSave = TestBookDto.fromJSONString(postResponse.getBody().asString());
        //delete book
        assert nonNull(bookToSave);
        given()
                .header("Authorization", "Bearer " + token)
                .contentType(ContentType.JSON)
        .when()
                .delete("/users/me/books/" + bookToSave.getId())
        .then()
                .statusCode(204);
        //attempt to get deleted book
        var getResponse = given()
                .header("Authorization", "Bearer " + token)
                .contentType(ContentType.JSON)
        .when()
                .get("/users/me/books/" + bookToSave.getId())
        .then()
                .assertThat()
                .statusCode(404)
                .and()
                .extract()
                .body()
                .asString();
        //@formatter:on

        assertTrue(getResponse.contains("Book with given id does not exist"));
    }

    @Test
    public void shouldReturnedNoContentWhenDeleteAllBooksPerformed() {
        //delete add
        //@formatter:off
        given()
                .header("Authorization", "Bearer " + token)
                .contentType(ContentType.JSON)
        .when()
                .delete("/users/me/books")
                .then()
        .assertThat()
                .statusCode(204)
                .extract()
                .body()
                .asString();
        //@formatter:on

        //get all
        var body = given()
                .header("Authorization", "Bearer " + token)
                .get("/users/me/books")
                .then()
                .extract()
                .body()
                .asString();
        var books = TestBooks.fromJSONString(body);

        assert nonNull(books);
        assertTrue(books.getBooks().isEmpty());
    }
}
