package pl.fairit.somedayiwill.movie.usersmovies;

import io.restassured.http.ContentType;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.boot.web.server.LocalServerPort;
import org.springframework.restdocs.RestDocumentationExtension;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import pl.fairit.somedayiwill.movie.testmovies.TestMovieDto;
import pl.fairit.somedayiwill.movie.testmovies.TestMovies;
import pl.fairit.somedayiwill.newsletter.SendGridEmailService;
import pl.fairit.somedayiwill.security.TestAuthRequest;
import pl.fairit.somedayiwill.user.TestUsers;

import java.util.Objects;

import static io.restassured.RestAssured.given;
import static java.util.Objects.nonNull;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static pl.fairit.somedayiwill.security.TestAuthRequest.aLoginRequest;
import static pl.fairit.somedayiwill.security.TestAuthRequest.aSignupRequest;

@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.DEFINED_PORT, value = "server.port=8085")
@ExtendWith({RestDocumentationExtension.class, SpringExtension.class})
@MockBean(SendGridEmailService.class)
@ContextConfiguration
public class MovieControllerRestAssuredTest {
    @LocalServerPort
    private int port;
    private static String token;

    @BeforeEach
    public void authorization() {
        if (nonNull(token)) {
            return;
        }
        var user = TestUsers.aUserWithRandomCredentials();
        var signupRequest = aSignupRequest(user);
        var loginRequest = aLoginRequest(user);

        given()
                .port(port)
                .basePath("/auth/signup")
                .contentType(ContentType.JSON)
                .body(signupRequest)
                .post();

        var authResponse = given()
                .port(port)
                .basePath("/auth/login")
                .contentType(ContentType.JSON)
                .body(loginRequest)
                .post()
                .then()
                .extract()
                .body()
                .asString();
        token = Objects.requireNonNull(TestAuthRequest.getTokenFromJSONString(authResponse)).getAccessToken();
    }

    @Test
    public void shouldReturnUnauthorizedWhenGetWithNoTokePerformed() {
        //@formatter:off
        given()
                .port(port)
                .basePath("/users/me/movies")
        .when()
                .get()
        .then()
                .assertThat()
                .statusCode(401);
        //@formatter:on
    }

    @Test
    public void shouldReturnListOfUsersMoviesWhenGetAllPerformed() {
        var movieToSave = TestMovieDto.aRandomMovieDto();
        var jsonMovieDto = TestMovieDto.asJSONString(movieToSave);

        //save movie
        var postResponse = given()
                .port(port)
                .basePath("/users/me/movies")
                .header("Authorization", "Bearer " + token)
                .contentType(ContentType.JSON)
                .body(jsonMovieDto)
                .post()
                .then()
                .extract()
                .body();
        movieToSave = TestMovieDto.fromJSONString(postResponse.asString());
        //get all
        var response = given()
                .port(port)
                .basePath("/users/me/movies")
                .header("Authorization", "Bearer " + token)
                .get();
        var movies = TestMovies.fromJSONString(response.getBody().asString());

        assert nonNull(movies);
        assertEquals(1, movies.getMovies().size());
        assertEquals(movieToSave, movies.getMovies().get(0));
        assertEquals(200, response.getStatusCode());
    }

    @Test
    public void shouldReturnSavedMovieWhenPostPerformed() {
        var movieToSave = TestMovieDto.aRandomMovieDto();
        var jsonMovieDto = TestMovieDto.asJSONString(movieToSave);

        var response = given()
                .port(port)
                .basePath("/users/me/movies")
                .header("Authorization", "Bearer " + token)
                .contentType(ContentType.JSON)
                .body(jsonMovieDto)
                .post();
        var returnedMovieDto = TestMovieDto.fromJSONString(response.getBody().asString());
        movieToSave.setId(returnedMovieDto.getId());
                    /*MovieId is generated by the database so there will always be this small difference
                    between objects before and after save. That's why I'm setting here id manually
                    to make this test possible to pass.*/

        assertEquals(movieToSave, returnedMovieDto);
        assertEquals(201, response.getStatusCode());
    }

    @Test
    public void shouldReturnMovieWhenGetMovieByIdPerformed() {
        var movieToSave = TestMovieDto.aRandomMovieDto();
        var jsonMovieDto = TestMovieDto.asJSONString(movieToSave);

        //save movie
        var postResponse = given()
                .port(port)
                .basePath("/users/me/movies")
                .header("Authorization", "Bearer " + token)
                .contentType(ContentType.JSON)
                .body(jsonMovieDto)
                .post();
        movieToSave = TestMovieDto.fromJSONString(postResponse.getBody().asString());
        //get movie
        var getResponse = given()
                .port(port)
                .basePath("/users/me/movies")
                .header("Authorization", "Bearer " + token)
                .contentType(ContentType.JSON)
                .get("/" + movieToSave.getId());
        var returnedMovie = TestMovieDto.fromJSONString(getResponse.getBody().asString());

        assertEquals(movieToSave, returnedMovie);
        assertEquals(200, getResponse.getStatusCode());
    }

    @Test
    public void shouldReturnNoContentStatusCodeAfterDeleteOnePerformed() {
        var movieToSave = TestMovieDto.aRandomMovieDto();
        var jsonMovieDto = TestMovieDto.asJSONString(movieToSave);

        //@formatter:off
        //save movie
        var postResponse = given()
                .port(port)
                .basePath("/users/me/movies")
                .header("Authorization", "Bearer " + token)
                .contentType(ContentType.JSON)
                .body(jsonMovieDto)
                .post();
        movieToSave = TestMovieDto.fromJSONString(postResponse.getBody().asString());
        //delete movie
        assert movieToSave != null;
        given()
                .port(port)
                .basePath("/users/me/movies")
                .header("Authorization", "Bearer " + token)
                .contentType(ContentType.JSON)
        .when()
                .delete("/" + movieToSave.getId())
        .then()
                .assertThat()
                .statusCode(204);
        //attempt to get deleted movie
        var getResponse = given()
                .port(port)
                .basePath("/users/me/movies")
                .header("Authorization", "Bearer " + token)
                .contentType(ContentType.JSON)
        .when()
                .get("/" + movieToSave.getId())
        .then()
                .assertThat()
                .statusCode(404)
                .and()
                .extract()
                .body()
                .asString();
        //@formatter:on
        assertTrue(getResponse.contains("Movie with given id does not exist"));
    }

    @Test
    public void shouldReturnedNoContentWhenDeleteAllMoviesPerformed() {
        //delete add
        //@formatter:off
        given()
                .port(port)
                .basePath("/users/me/movies")
                .header("Authorization", "Bearer " + token)
                .contentType(ContentType.JSON)
                .when()
                .delete()
                .then()
                .assertThat()
                .statusCode(204)
                .extract()
                .body()
                .asString();
        //@formatter:on

        //get all
        var body = given()
                .port(port)
                .basePath("/users/me/movies")
                .header("Authorization", "Bearer " + token)
                .get()
                .then()
                .extract()
                .body()
                .asString();
        var movies = TestMovies.fromJSONString(body);

        assert nonNull(movies);
        assertTrue(movies.getMovies().isEmpty());
    }
}

